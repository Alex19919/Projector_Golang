// • Виконати популярні задачі із масивом:

package main

import 	(
	"fmt"
	"sort"
)

func main () {

	arr := []int{3, 15, 2, 9, 15, 36, 20, 16}
// • Знайти другий мінімальний елемент масиву
				// перший min
// min := arr[0]
// for _, element := range arr {
//     if element < min {
//         min = element
//     }
// }
// fmt.Println(min)
       
				// другий min
sort.Slice(arr, func(i, j int) bool {
	return arr[i] < arr[j]
})
fmt.Println(arr[1]) 

// • Знайти неповторні цілі числа в масиві
// найпростіше: під час сортування масиву заповнювати другий масив неповторними числами



// • Зверніть масив
// найпростіше: записати Наш масив в інший з кінця Нашого. Але взагалі таке рішення вважається занадто поганим, але у нас не курс по алгоритмам, тому можна

sort.Slice(arr, func(i, j int) bool {
    return arr[i] > arr[j]
	
})
fmt.Println(arr)

sort.Slice(arr, func(i, j int) bool {
	return arr[i] < arr[j]
})
fmt.Println(arr) 



// • Видаліть зі масива дублюючі значення
// найпростіше: відсортувати, на другому кроці видалити повторні



// • Порахувати в рядку із латинських і кириличних симболів кількість перших і других
// тут все цікавіше, тому що це вже не зовсім масив. Наприклад, згадуємо, що для латинських симболів індекс послідовний, а для кирилічних - ні, тому що кириличний симбол більше за байт

}
